%YAML 1.2
# There are multiple represenations of a Property List,
# but here we only care about the XML one.
#
# XML Property Lists are XML files with the following DTD:
# https://www.apple.com/DTDs/PropertyList-1.0.dtd
#
# Notably:
#
# - besides <plist>, no tag expects an attribute
# - all data elements do not expect child elements
# - <dict> expects <key>-'data' *pairs*
# - <true /> and <false /> must be empty
---
name: Property List (XML)
scope: text.xml.plist
version: 2

file_extensions:
  - plist
  - tmSnippet
  - tmTheme
  - stTheme
  - tmLanguage
  - hidden-tmSnippet
  - hidden-tmTheme
  - hidden-stTheme
  - hidden-tmLanguage

# first_line_match: ^\s*<!DOCTYPE plist|^\s*<plist version="1\.0">

variables:
  tag_name_break: (?![[:alnum:]:_.-])

contexts:

  main:
    - include: plist

  comments:
    - include: scope:text.xml#comment

  cdata:
    - include: scope:text.xml#cdata

  entity:
    - include: scope:text.xml#entity

  should-be-entity:
    - include: scope:text.xml#should-be-entity

  plist:
    - include: scope:text.xml#preprocessor
    - include: scope:text.xml#doctype
    - match: (<)(plist)(?:\s+(version)\s*(=)\s*((")1\.0(")))?\s*(>)
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin
        2: entity.name.tag.localname.xml
        3: entity.other.attribute-name.localname.xml
        4: punctuation.separator.key-value.xml
        5: string.quoted.double.xml
        6: punctuation.definition.string.begin.xml
        7: punctuation.definition.string.end.xml
        8: punctuation.definition.tag.end
      set: inside-plist
    - include: whitespace-or-tags

  inside-plist:
    - meta_content_scope: meta.inside-plist.plist
    - include: plist-end
    - include: any-elements

  plist-end:
    - match: (</)(plist){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: [whitespace-or-tags, inside-tag]

  any-elements:
    - include: comments
    - match: (?=\S)
      push: any-element

  any-element:
    # this context pops after the first matched element
    - include: boolean
    - include: data
    - include: date
    - include: number
    - include: string
    - include: array
    - include: dict
    - include: whitespace-or-tags

  array:
    - match: (<)(array){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-array-tag

  inside-array-tag:
    - meta_scope: meta.tag.xml
    - match: '>'
      scope: punctuation.definition.tag.end.xml
      set: inside-array
    - match: \s?(?=<)
      scope: invalid.illegal.missing-tag-end.xml
      set: inside-array
    - include: tag-end-self-closing

  inside-array:
    - meta_content_scope: meta.inside-array.plist
    - include: array-end
    - include: any-elements

  array-end:
    - match: (</)(array){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-tag

  dict:
    - match: (<)(dict){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-dict-tag

  inside-dict-tag:
    - meta_scope: meta.tag.xml
    - match: '>'
      scope: punctuation.definition.tag.end.xml
      set: inside-dict
    - match: \s?(?=<)
      scope: invalid.illegal.missing-tag-end.xml
      set: inside-dict
    - include: tag-end-self-closing

  inside-dict:
    - meta_content_scope: meta.inside-dict.plist
    - include: dict-end
    - include: dict-keys
    - include: whitespace-or-tags

  dict-end:
    - match: (</)(dict){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-tag

  dict-keys:
    - match: (<)(key){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      push: inside-key-tag

  inside-key-tag:
    - meta_scope: meta.tag.xml
    - match: (/?)(>)
      captures:
        1: invalid.illegal.self-closing.xml
        2: punctuation.definition.tag.end.xml
      set: [any-element, inside-dict-key]
    - match: \s?(?=<)
      scope: invalid.illegal.missing-tag-end.xml
      set: [any-element, inside-dict-key]

  inside-dict-key:
    - meta_content_scope: meta.inside-dict-key.plist
    - include: key-end
    - include: value-content

  key-end:
    - match: (</)(key){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-tag

  boolean:
    - match: (<)(true|false){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml constant.language.boolean.plist
      set: inside-boolean

  inside-boolean:
    - meta_scope: meta.tag.xml
    - include: tag-end-self-closing
    - include: tag-end

  data:
    - match: (<)(data){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-data-tag

  inside-data-tag:
    - meta_scope: meta.tag.xml
    - match: '>'
      scope: punctuation.definition.tag.end.xml
      set: inside-data
    - match: \s?(?=<)
      scope: invalid.illegal.missing-tag-end.xml
      set: inside-data
    - include: tag-end-self-closing

  inside-data:
    - meta_content_scope: meta.inside-value.data.plist
    - include: data-end
    - include: value-content # TODO: expect base-64 only

  data-end:
    - match: (</)(data){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-tag

  date:
    - match: (<)(date){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-date-tag

  inside-date-tag:
    - meta_scope: meta.tag.xml
    - match: (/?)(>)
      captures:
        1: invalid.illegal.self-closing.xml
        2: punctuation.definition.tag.end.xml
      set: inside-date
    - include: tag-end-missing-pop

  inside-date:
    - meta_content_scope: meta.inside-value.date.plist
    - include: date-end
    - include: value-content # TODO: ISO 8601 format date i.e. "2007-04-05T14:30Z" or "2007-04-05T12:30-02:00"

  date-end:
    - match: (</)(date){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-tag

  number:
    - include: integer
    - include: real

  integer:
    - match: (<)(integer){{tag_name_break}}
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: inside-integer-tag

  inside-integer-tag:
    - meta_scope: meta.tag.xml
    - match: (/?)(>)
      captures:
        1: invalid.illegal.self-closing.xml
        2: punctuation.definition.tag.end.xml
      set: inside-integer
    - include: tag-end-missing-pop

  inside-integer:
    - meta_content_scope: meta.inside-value.integer.plist
    - match: (</)(integer){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-tag
    - match: '[-+]?\d+'
      scope: constant.numeric.plist
      push: after-number
    - match: '[^\s<]+'
      scope: invalid.illegal.expected-number.plist

  real:
    - match: (<)(real){{tag_name_break}}
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: inside-real-tag

  inside-real-tag:
    - meta_scope: meta.tag.xml
    - match: (/?)(>)
      captures:
        1: invalid.illegal.self-closing.xml
        2: punctuation.definition.tag.end.xml
      set: inside-real
    - include: tag-end-missing-pop

  inside-real:
    - meta_content_scope: meta.inside-value.real.plist
    - match: (</)(real){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-tag
    - match: '[-+]?\d+(\.\d*)?(E[-+]\d+)?'
      scope: constant.numeric.plist
      push: after-number
    - include: illegal-text

  after-number:
    - match: (?=<)
      pop: 1
    - include: illegal-text

  string:
    - match: (<)(string){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-string-tag

  inside-string-tag:
    - meta_scope: meta.tag.xml
    - match: '>'
      scope: punctuation.definition.tag.end.xml
      set: inside-string
    - match: \s?(?=<)
      scope: invalid.illegal.missing-tag-end.xml
      set: inside-string
    - include: tag-end-self-closing

  inside-string:
    - meta_content_scope: meta.inside-value.string.plist
    - include: string-end
    - include: value-content

  string-end:
    - match: (</)(string){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
      set: inside-tag

  value-content:
    - include: cdata
    - include: comments
    - include: unknown-tags
    - include: entity
    - include: should-be-entity
    - include: value-bailout

  value-bailout:
    # don't escalate errors caused by incomplete tags beyound array or dict boundaries
    - match: \s?(?=</(?:array|dict){{tag_name_break}})
      scope: invalid.illegal.missing-tag.plist
      pop: 1

  whitespace-or-tags:
    - include: comments
    - include: unknown-tags
    - include: illegal-text

  illegal-text:
    - match: '[^\s<]+'
      scope: invalid.illegal.unexpected-text.plist

  unknown-tags:
    - match: (</?)([^\s<>]*)
      captures:
        1: punctuation.definition.tag.begin.xml
        2: invalid.illegal.unknown-or-unexpected-tag.plist
      push: inside-tag

  inside-tag:
    - meta_scope: meta.tag.xml
    - include: tag-end
    - include: tag-end-self-closing
    - include: tag-end-missing-pop

  tag-end:
    - match: '>'
      scope: punctuation.definition.tag.end.xml
      pop: 1

  tag-end-self-closing:
    - match: />
      scope: punctuation.definition.tag.end.xml
      pop: 1

  tag-end-missing-pop:
    # pop, if the next opening tag is following, while scoping the
    # preceding space to give a hint about the unclosed tag
    - match: \s?(?=<)
      scope: invalid.illegal.missing-tag-end.xml
      pop: 1
